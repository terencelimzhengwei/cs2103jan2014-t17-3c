//@author: a0097277m-reused



	/**
	 * origin: D:\TiMEWiSE\TimeWiseLogic\Logger.cpp
	 */

#include "Logger.h"

using namespace std;

const int	 Logger::CONFIG_DETAILS_SIZE					= 3;
const int	 Logger::FILENAME								= 0;
const int	 Logger::CLASS_TO_MONITOR						= 1;
const int	 Logger::MIN_LEVEL_TO_LOG						= 2;

const string Logger::CONFIG_FILE_NAME						= "../configLogger.txt";

const string	Logger::DEFAULT_UNCONFIGURED_VALUE			= "";
const string	Logger::DEFAULT_LOG_FILE_NAME				= "TimeWiseLog.txt";
const string	Logger::DEFAULT_CLASS_TO_MONITOR			= "";
const string	Logger::DEFAULT_LEVEL_TO_LOG				= "INFOLOG";
const string	Logger::DEFAULT_LOG_MESSAGE_LINKER			= ": ";
const string	Logger::DEFAULT_KEY_VALUE_DELIMITER			= " ";
const string	Logger::DEFAULT_INFO_LOG_IDENTIFIER			= "\t\t\t";
const string	Logger::DEFAULT_NOTICE_LOG_IDENTIFIER		= "\t\t";
const string	Logger::DEFAULT_WARNING_LOG_IDENTIFIER		= "\t";
const string	Logger::DEFAULT_ERROR_LOG_IDENTIFIER		= "";
const string	Logger::DEFAULT_FATAL_LOG_IDENTIFIER		= LOG_TYPE_STRING[FATALLOG] + DEFAULT_LOG_MESSAGE_LINKER;
const LOG_TYPE	Logger::DEFAULT_LOGTYPE_TO_USE				= INFOLOG;

const string	Logger::MESSAGE_ERROR_FATAL_LOG				= "Fatal log occurred!";
const string	Logger::MESSAGE_START_LOG					= "Logging Started at: ";



const string Logger::CONFIG_LABEL_LIST[CONFIG_DETAILS_SIZE]				= {"FileName:","ClasstoMonitor:","MinLogLevel:"};
const string Logger::CONFIG_DEFAULT_VALUES_LIST[CONFIG_DETAILS_SIZE]	= 
{DEFAULT_LOG_FILE_NAME,DEFAULT_CLASS_TO_MONITOR,DEFAULT_LEVEL_TO_LOG};

string Logger::_configDetailList[CONFIG_DETAILS_SIZE]			= 
{DEFAULT_UNCONFIGURED_VALUE,DEFAULT_UNCONFIGURED_VALUE,DEFAULT_UNCONFIGURED_VALUE};

Logger* Logger::logger;



Logger::Logger() {
}

Logger* Logger::getLogger () {
	bool isFirstTimeToGetLogger = (logger == NULL);

	if(isFirstTimeToGetLogger) {
		initialiseLogger();
	}
	return logger;
}

void Logger::initialiseLogger() {
	createLogger();

	logger->configureLogger();
	logger->printStartMessage();
}

/****************************************************/
/************* Initialisation Methods ***************/
/****************************************************/

void Logger::createLogger () {
	static Logger theOne;
	logger = &theOne;
}

void Logger::configureLogger() {
	loadConfigData();
	setDefaultValues();
	extractMinLevelToMonitor();
	openLogFileToWrite();
}

void Logger::printStartMessage() {
	string curTime = getCurTime();
	logger->_logWriter << MESSAGE_START_LOG << curTime << endl;
}

void Logger::openLogFileToWrite() {
	logger->_logWriter.open(_configDetailList[FILENAME]);
}

/****************************************************/
/************** Configuration Methods ***************/
/****************************************************/

void Logger::loadConfigData() {
	ifstream configFile(CONFIG_FILE_NAME);
	string configLabel;
	string configData;
	string configLine;

	while(configFile.is_open() && configFile.good()) {
		getline(configFile,configLine);
		extractInfo(configLine, configLabel,configData);
		saveExtractedInfo (configLabel, configData);
	}
}

void Logger::extractInfo(const string& configLine,string& configLabel,string& configData) {
	configLabel = getNewLabel(configLine);
	configData	= getNewData(configLine);

	return;
}

void Logger::saveExtractedInfo	(const string& configLabel, const string& configData) {
	for(int i = 0;i<CONFIG_DETAILS_SIZE;i++) {
		if(configLabel == CONFIG_LABEL_LIST[i]) {
			_configDetailList[i] = configData;
			break;
		}
	}
}

void Logger::setDefaultValues(){
	//set the default values for those which are still empty strings
	for(int i=0; i<CONFIG_DETAILS_SIZE;i++) {
		if(_configDetailList[i] == DEFAULT_UNCONFIGURED_VALUE) {
			_configDetailList[i] = CONFIG_DEFAULT_VALUES_LIST[i];
		}
	}
	return;
}

void Logger::extractMinLevelToMonitor() {
	for (LOG_TYPE logType = INFOLOG; logType < LOG_TYPE_COUNT; logType = static_cast<LOG_TYPE>(logType + INCREMENT_VALUE)) {
		if(LOG_TYPE_STRING[logType] == _configDetailList[MIN_LEVEL_TO_LOG]) {
			_minLevelToLog = logType;
			break;
		}
	}
}

string Logger::getNewLabel(string newLine) {
	string label;
	stringstream tempStream(newLine);

	tempStream >> label;

	return label;
}

string Logger::getNewData(string newLine) {
	string newData = DEFAULT_UNCONFIGURED_VALUE;
	int pos = newLine.find_first_of(DEFAULT_KEY_VALUE_DELIMITER);

	if(pos != string::npos) {
		newData = newLine.substr(pos+INCREMENT_VALUE);
	}

	return newData;
}

string Logger::getCurTime()	{
	char logTime[LOG_TIME_SIZE];
	time_t rawTime = time(0);
	tm curTimeTm;
	localtime_s(&curTimeTm, &rawTime);
	strftime(logTime, LOG_TIME_SIZE, "%d-%m-%Y",&curTimeTm);

	return logTime;
}

void Logger::log (string callingClass, string message, LOG_TYPE logType) {
	if(isToBeLogged(callingClass,logType)) {
		string completeMessage = callingClass + DEFAULT_LOG_MESSAGE_LINKER + message;
		logTheMessage(completeMessage, logType);
	}
	return;
}

bool Logger::isToBeLogged(string callingClass, LOG_TYPE logType) {
	bool isOfDesiredLevel = static_cast<int>(logType) >= static_cast<int>(_minLevelToLog);
	bool isOfDesiredClass = (_configDetailList[CLASS_TO_MONITOR].empty()) || (_configDetailList[CLASS_TO_MONITOR] == callingClass);

	return isOfDesiredClass && isOfDesiredLevel;
}

void Logger::logTheMessage(string message, LOG_TYPE logType) {
	switch(logType) {
	case INFOLOG:{
		logInfo(message);
		break;
	}
	case NOTICELOG:{
		logNotice(message);
		break;
	}
	case WARNINGLOG:{
		logWarning(message);
		break;
	}
	case ERRORLOG:{
		logError(message);
		break;
	}
	case FATALLOG:{
		logFatal(message);
		//throw FatalLogException(MESSAGE_ERROR_FATAL_LOG);
		break;
	}
	}
}

void Logger::logInfo (string message) {
	_logWriter << DEFAULT_INFO_LOG_IDENTIFIER << message << endl;
}
void Logger::logNotice (string message) {
	_logWriter << DEFAULT_NOTICE_LOG_IDENTIFIER << message << endl;
}
void Logger::logWarning (string message) {
	_logWriter << DEFAULT_WARNING_LOG_IDENTIFIER << message << endl;
}
void Logger::logError (string message) {
	_logWriter << message << endl;
}
void Logger::logFatal (string message) {
	_logWriter << DEFAULT_FATAL_LOG_IDENTIFIER << message << endl;
}

Logger::~Logger() {
	this->_logWriter.close();
}
	// End of segment: D:\TiMEWiSE\TimeWiseLogic\Logger.cpp





	/**
	 * origin: D:\TiMEWiSE\TimeWiseLogic\Logger.h
	 */

#pragma once
#ifndef _LOGGER_H_
#define _LOGGER_H_

#include <fstream>
#include <string>
#include <ctime>
#include <sstream>
#include "Constants.h"

//a singleton for the whole program
class Logger {
public:
	void setMinLevelToLog		(LOG_TYPE);

	static	Logger*	getLogger	();
	void	log			(std::string  callingClass, 
	std::string  message, 
	LOG_TYPE logType = DEFAULT_LOGTYPE_TO_USE);

private:
	std::ofstream _logWriter;
	LOG_TYPE  _minLevelToLog;
	static Logger* logger; //the single object

	static		 std::string  _configDetailList[];

	static const std::string  CONFIG_LABEL_LIST[];
	static const std::string  CONFIG_DEFAULT_VALUES_LIST[];
	static const std::string  CONFIG_FILE_NAME;

	static const std::string  DEFAULT_UNCONFIGURED_VALUE;
	static const std::string  DEFAULT_LOG_FILE_NAME;
	static const std::string  DEFAULT_CLASS_TO_MONITOR;
	static const std::string  DEFAULT_LEVEL_TO_LOG;
	static const std::string  DEFAULT_LOG_MESSAGE_LINKER;
	static const std::string  DEFAULT_KEY_VALUE_DELIMITER;
	static const std::string  DEFAULT_INFO_LOG_IDENTIFIER;
	static const std::string  DEFAULT_NOTICE_LOG_IDENTIFIER;
	static const std::string  DEFAULT_WARNING_LOG_IDENTIFIER;
	static const std::string  DEFAULT_ERROR_LOG_IDENTIFIER;
	static const std::string  DEFAULT_FATAL_LOG_IDENTIFIER;
	static const LOG_TYPE	  DEFAULT_LOGTYPE_TO_USE;

	static const std::string  MESSAGE_ERROR_FATAL_LOG;
	static const std::string  MESSAGE_START_LOG;

	static const int		  CONFIG_DETAILS_SIZE;
	static const int		  FILENAME;
	static const int		  CLASS_TO_MONITOR;
	static const int		  MIN_LEVEL_TO_LOG;

	// initialization functions
	static void initialiseLogger	();
	static void createLogger		();

	//log functions
	void logTheMessage				(std::string message, LOG_TYPE logType);
	void logInfo					(std::string message);
	void logNotice					(std::string message);
	void logWarning					(std::string message);
	void logError					(std::string message);
	void logFatal					(std::string message);

	//helper functions
	void openLogFileToWrite			();
	void setDefaultValues			();
	void extractMinLevelToMonitor	();
	void printStartMessage			();
	std::string getNewData			(std::string newLine);
	std::string getNewLabel			(std::string newLine);
	bool isToBeLogged				(std::string  callingClass,
		LOG_TYPE logType);

	std::string getCurTime			();

	//configuration functions
	void configureLogger	();
	void loadConfigData		();
	void extractInfo		(const std::string& configLine,
		std::string&	configLabel,
		std::string&	configData);

	void saveExtractedInfo	(const std::string& configLabel, 
		const std::string& configData);

	//constructor
	Logger	();
	Logger	(Logger const&);

	//equals operator overload
	void operator=(Logger const&);

	//destructor
	~Logger();
};

#endif

	// End of segment: D:\TiMEWiSE\TimeWiseLogic\Logger.h





